"""
Django settings for bouldering_cy project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import dj_database_url
import sentry_sdk

if os.path.isfile("env.py"):
    import env

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
PRODUCTION = os.environ.get("PRODUCTION", "False").lower() == "true"
DEBUG = not PRODUCTION

ALLOWED_HOSTS = [
    "bouldering-cyprus-53e1273cde1e.herokuapp.com",
    "127.0.0.1",
    os.environ.get("NGROK_TUNNEL"),
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_summernote",
    "crispy_forms",
    "crispy_bootstrap5",
    "storages",
    "home",
    "shop",
    "cart",
    "payments",
    "orders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "bouldering_cy.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "cart.contexts.cart_summary",
            ],
        },
    },
]

WSGI_APPLICATION = "bouldering_cy.wsgi.application"

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.parse(os.environ.get("DATABASE_URL", ""))
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME":
        "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_KEY")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_EMAIL")
SERVER_EMAIL = os.environ.get("DEFAULT_EMAIL")

if not PRODUCTION:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "Europe/Nicosia"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Static/Media files - AWS S3 settings in PRODUCTION
if PRODUCTION:
    # Cache control
    AWS_S3_OBJECT_PARAMETERS = {
        "Expires": "Thu, 31 Dec 2099 20:00:00 GMT",
        "CacheControl": "max-age=94608000",
    }

    # AWS S3 Bucket config
    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME")
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_QUERYSTRING_AUTH = False  # Makes URLs cleaner and cacheable
    STATICFILES_LOCATION = "static"
    MEDIAFILES_LOCATION = "media"

    # CloudFront Distribution
    AWS_CLOUDFRONT_DOMAIN = os.environ.get("AWS_CLOUDFRONT_DOMAIN")

    # Ensure files are properly structured in S3
    # STATICFILES_STORAGE = "custom_storages.StaticStorage"
    # DEFAULT_FILE_STORAGE = "custom_storages.MediaStorage"
    STORAGES = {
        "default": {
            "BACKEND": "custom_storages.MediaStorage"
        },
        "staticfiles": {
            "BACKEND": "custom_storages.StaticStorage"
        },
    }

    # Ensure Django collects the root `static/` directory
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]

    # Set static and media URLs in production to CloudFront
    STATIC_URL = f"https://{AWS_CLOUDFRONT_DOMAIN}/{STATICFILES_LOCATION}/"
    MEDIA_URL = f"https://{AWS_CLOUDFRONT_DOMAIN}/{MEDIAFILES_LOCATION}/"

# Static/Media files in Local Development
else:
    STATIC_URL = "/static/"
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Cart session key
CART_SESSION_ID = 'cart'

# Stripe settings
STRIPE_LIVE_MODE = False
if STRIPE_LIVE_MODE:
    STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_LIVE_PUBLIC_KEY")
    STRIPE_SECRET_KEY = os.environ.get("STRIPE_LIVE_SECRET_KEY")
else:
    STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_TEST_PUBLIC_KEY")
    STRIPE_SECRET_KEY = os.environ.get("STRIPE_TEST_SECRET_KEY")

STANDARD_DELIVERY_PERCENTAGE = 10
FREE_DELIVERY_THRESHOLD = 65.00
STRIPE_CURRENCY = "eur"
STRIPE_WEBHOOK_SECRET = os.environ.get("STRIPE_WEBHOOK_SECRET")
ORDER_CREATION_RETRIES = 3
ORDER_CREATION_RETRY_DELAY = 3  # seconds
TEST_WEBHOOK_ORDER_HANDLER = os.environ.get("TEST_WEBHOOK_ORDER_HANDLER", "False").lower() == "true"

# Stock Validation
LOW_STOCK_THRESHOLD = 10

# Sentry settings
sentry_sdk.init(
    dsn=
    "https://0581bd20fe579142f1b0058684ccad93@o4508116014989312.ingest.de.sentry.io/4508805680070736",
    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    _experiments={
        # Set continuous_profiling_auto_start to True
        # to automatically start the profiler on when
        # possible.
        "continuous_profiling_auto_start": True,
    },
)

# LOGGING CONFIGURATION
ADMINS = [
    ("dimis_papa", os.environ.get("DEFAULT_EMAIL")),
]

# Ensure the 'logs' directory exists (only needed for development)
LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format":
            "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{asctime} {levelname} {message}",
            "style": "{",
        },
        "notification": {
            "format": "{levelname} {asctime}",
            "style": "{"
        }
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple"
        },
        "file_log": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(LOG_DIR, 'app.log'),
            "formatter": "verbose",
            "filters": [],
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "bouldering_cy.logging_handlers.SimpleAdminEmailHandler",
            "formatter": "notification"
        }
    },
    "loggers": {
        "": {
            "handlers": ["console", "file_log", "mail_admins"],
            "level": "INFO",
            "propagate": True,
        },
        "bouldering_cy": {
            "handlers": ["console", "file_log", "mail_admins"],
            "level": "INFO",
            "propagate": False,
        }
    }
}

print("\n\n---- SETTINGS CONFIGURATION ----")
print(f"PRODUCTION setting is: {PRODUCTION}")
print(f"DEBUG setting is: {DEBUG}")
print("\n---- STRIPE SETTINGS ----")
print(f"STRIPE_LIVE_MODE setting is: {STRIPE_LIVE_MODE}")
print(f"STRIPE_PUBLIC_KEY setting exists: {bool(STRIPE_PUBLIC_KEY)}")
print(f"STRIPE_SECRET_KEY setting exists: {bool(STRIPE_SECRET_KEY)}")
print(f"STRIPE_WEBHOOK_SECRET setting exists: {bool(STRIPE_WEBHOOK_SECRET)}")
print(f"TEST_WEBHOOK_ORDER_HANDLER setting is: {TEST_WEBHOOK_ORDER_HANDLER}")
if PRODUCTION:
    print("\n---- AWS SETTINGS ----")
    print(f"AWS_STORAGE_BUCKET_NAME setting exists: {bool(AWS_STORAGE_BUCKET_NAME)}")
    print(f"AWS_S3_REGION_NAME setting exists: {bool(AWS_S3_REGION_NAME)}")
    print(f"AWS_ACCESS_KEY_ID setting exists: {bool(AWS_ACCESS_KEY_ID)}")
    print(f"AWS_SECRET_ACCESS_KEY setting exists: {bool(AWS_SECRET_ACCESS_KEY)}")
    print(f"AWS_CLOUDFRONT_DOMAIN setting exists: {bool(AWS_CLOUDFRONT_DOMAIN)}")
print("\n---- ORDER SETTINGS ----")
print(f"LOW_STOCK_THRESHOLD setting is: {LOW_STOCK_THRESHOLD}")
print(f"STANDARD_DELIVERY_PERCENTAGE setting is: {STANDARD_DELIVERY_PERCENTAGE}")
print(f"FREE_DELIVERY_THRESHOLD setting is: {FREE_DELIVERY_THRESHOLD}")
print(f"STRIPE_CURRENCY setting is: {STRIPE_CURRENCY}")
print(f"ORDER_CREATION_RETRIES setting is: {ORDER_CREATION_RETRIES}")
print(f"ORDER_CREATION_RETRY_DELAY setting is: {ORDER_CREATION_RETRY_DELAY}")
print("\n---- EMAIL SETTINGS ----")
print(f"EMAIL_BACKEND being used: {EMAIL_BACKEND}")
print(f"SENDGRID API KEY exists: {'EMAIL_HOST_KEY' in os.environ}")
print(f"DEFAULT_EMAIL exists: {'DEFAULT_EMAIL' in os.environ}")
print("\n\n")
